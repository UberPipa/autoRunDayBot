import datetime
import time

from aiogram import types, Bot
from aiogram.utils.exceptions import MessageToEditNotFound, MessageToDeleteNotFound, MessageCantBeEdited, \
    MessageNotModified


async def generationTextFirstBlood(status) -> str:
    """

        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ FirstBlood

    """
    nowTime = datetime.datetime.now()
    nowTime = nowTime.strftime('%Y-%m-%d %H:%M:%S')
    text = f'–ü–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞: <code>{nowTime}</code>.\n'


    state = status['STATE']
    if state == 'OPENED':
        state = 'üü¢'
    elif state == 'PAUSED':
        state = '‚è∏Ô∏è'
    elif state == 'CLOSED':
        state = 'üõë'
    elif state == 'EXPIRED':
        state = '‚ùóÔ∏è'
    state = f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state}\n'
    text += state

    if status['INFO']['DATE_START']:
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è 
        """
        timeStart = datetime.datetime.fromtimestamp(int(status['INFO']['DATE_START']))
        timeStart = timeStart.strftime('%H:%M:%S')
        timeStart = f'–î–µ–Ω—å –Ω–∞—á–∞—Ç: <code>{timeStart}</code>.\n'
        text += timeStart


    if status['INFO']['DATE_FINISH'] and status['STATE'] == 'CLOSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 
        """
        timeEnd = datetime.datetime.fromtimestamp(int(status['INFO']['DATE_FINISH']))
        timeEnd = timeEnd.strftime('%H:%M:%S')
        timeEnd = f'–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: <code>{timeEnd}</code>.\n'
        text += timeEnd


    if status['STATE'] == 'OPENED' or status['STATE'] == 'PAUSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 
        """
        timeStart = status['INFO']['DATE_START']
        # –¢–µ–∫—É—â–µ–µ Unix –≤—Ä–µ–º—è
        currentUnixTime = time.time()
        durationWork = int(currentUnixTime) - int(timeStart)
        durationWork = datetime.datetime.utcfromtimestamp(durationWork)
        durationWork = durationWork.strftime('%H:%M:%S')
        durationWork = f'–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ: <code>{durationWork}</code>.\n'
        text += durationWork


    if status['STATE'] == 'OPENED' or status['STATE'] == 'PAUSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        timeStart = int(status['INFO']['DATE_START'])
        nineHours = 32400
        reccomendedTimeEndWork = datetime.datetime.fromtimestamp(timeStart + nineHours)
        reccomendedTimeEndWork = reccomendedTimeEndWork.strftime('%H:%M:%S')
        reccomendedTimeEndWork = f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤: <code>{reccomendedTimeEndWork}</code>.\n'
        text += reccomendedTimeEndWork


    if status['INFO']['DATE_FINISH'] and status['STATE'] == 'CLOSED' and status['INFO']['DATE_START']:
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª 
        """
        timeStart = int(status['INFO']['DATE_START'])
        timeEnd = int(status['INFO']['DATE_FINISH'])
        timeWork = timeEnd - timeStart
        timeWork = datetime.datetime.utcfromtimestamp(timeWork)
        timeWork = timeWork.strftime('%H:%M:%S')
        timeWork = f'–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏: <code>{timeWork}</code>.\n'
        text += timeWork


    return text


async def delete_inline_and_msg(msg):
    """

        –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    """
    bot: Bot = msg.bot
    try:
        await msg.delete()  # —É–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    except MessageToEditNotFound:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass
    except MessageToDeleteNotFound:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass
    except MessageCantBeEdited:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        pass
    except MessageNotModified:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass
    chat_id = msg.chat.id
    message_id = msg.message_id - 1  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    reply_markup = types.InlineKeyboardMarkup()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id,
                                            reply_markup=reply_markup)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    except MessageCantBeEdited:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ")
        pass
    except MessageToEditNotFound:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass
    except MessageToDeleteNotFound:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass
    except MessageNotModified:
        # print("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        pass


# async def generationTextStatus(status) -> str:
#     """
#
#         –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞
#
#     """
#     state = status['STATE']
#     if state == 'OPENED':
#         state = '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å <b>–æ—Ç–∫—Ä—ã—Ç</b> - üü¢.'
#     elif state == 'PAUSED':
#         state = '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å <b>–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b> - ‚è∏Ô∏è.'
#     elif state == 'CLOSED':
#         state = '–†–∞–±–æ—á–∏–π –¥–µ–Ω—å <b>–∑–∞–∫—Ä—ã—Ç</b> - üõë.'
#     state = f'{state}\n'
#     text = state
#
#
#     if status['INFO']['DATE_START']:
#         """
#             –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
#         """
#         timeStart = datetime.datetime.fromtimestamp(int(status['INFO']['DATE_START']))
#         timeStart = f'–î–µ–Ω—å –Ω–∞—á–∞—Ç: <code>{timeStart}</code>.\n'
#         text += timeStart
#
#     if status['STATE'] == 'OPENED' or status['STATE'] == 'PAUSED':
#         """
#             –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
#         """
#         timeStart = int(status['INFO']['DATE_START'])
#         nineHours = 32400
#         reccomendedTimeEndWork = datetime.datetime.fromtimestamp(timeStart + nineHours)
#         reccomendedTimeEndWork = f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è+: <code>{reccomendedTimeEndWork}</code>.\n'
#         text += reccomendedTimeEndWork
#
#     return text