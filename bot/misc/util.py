import datetime
import time


async def generationTextFirstBlood(status) -> str:
    """

        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ FirstBlood

    """
    state = status['STATE']
    if state == 'OPENED':
        state = 'üü¢'
    elif state == 'PAUSED':
        state = '‚è∏Ô∏è'
    elif state == 'CLOSED':
        state = 'üõë'
    elif state == 'EXPIRED':
        state = '‚ùóÔ∏è'
    state = f'–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {state}\n'
    text = state

    if status['INFO']['DATE_START']:
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è 
        """
        timeStart = datetime.datetime.fromtimestamp(int(status['INFO']['DATE_START']))
        timeStart = timeStart.strftime('%H:%M:%S')
        timeStart = f'–î–µ–Ω—å –Ω–∞—á–∞—Ç: <code>{timeStart}</code>.\n'
        text += timeStart


    if status['INFO']['DATE_FINISH'] and status['STATE'] == 'CLOSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 
        """
        timeEnd = datetime.datetime.fromtimestamp(int(status['INFO']['DATE_FINISH']))
        timeEnd = timeEnd.strftime('%H:%M:%S')
        timeEnd = f'–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: <code>{timeEnd}</code>.\n'
        text += timeEnd


    if status['STATE'] == 'OPENED' or status['STATE'] == 'PAUSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã 
        """
        timeStart = status['INFO']['DATE_START']
        # –¢–µ–∫—É—â–µ–µ Unix –≤—Ä–µ–º—è
        currentUnixTime = time.time()
        durationWork = int(currentUnixTime) - int(timeStart)
        durationWork = datetime.datetime.utcfromtimestamp(durationWork)
        durationWork = durationWork.strftime('%H:%M:%S')
        durationWork = f'–í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ: <code>{durationWork}</code>.\n'
        text += durationWork


    if status['STATE'] == 'OPENED' or status['STATE'] == 'PAUSED':
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        timeStart = int(status['INFO']['DATE_START'])
        nineHours = 32400
        reccomendedTimeEndWork = datetime.datetime.fromtimestamp(timeStart + nineHours)
        reccomendedTimeEndWork = reccomendedTimeEndWork.strftime('%H:%M:%S')
        reccomendedTimeEndWork = f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤: <code>{reccomendedTimeEndWork}</code>.\n'
        text += reccomendedTimeEndWork


    if status['INFO']['DATE_FINISH'] and status['STATE'] == 'CLOSED' and status['INFO']['DATE_START']:
        """ 
            –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª 
        """
        timeStart = int(status['INFO']['DATE_START'])
        timeEnd = int(status['INFO']['DATE_FINISH'])
        timeWork = timeEnd - timeStart
        timeWork = datetime.datetime.utcfromtimestamp(timeWork)
        timeWork = timeWork.strftime('%H:%M:%S')
        timeWork = f'–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏: <code>{timeWork}</code>.\n'
        text += timeWork


    return text


async def generationTextStatus(status) -> str:
    """

        –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —à–∞–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ FirstBlood

    """